# name: timed-cli

# on:
#   schedule:
#     - cron: '0 17 * * *'
#   push:
#     branches:
#       - main
# jobs:
#   generate:
#     permissions: write-all
#     runs-on: ubuntu-latest
#     timeout-minutes: 5

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Branch
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            let fileCont=$(cat README.md)
            fileCont = fileCont.replace(/(?<=签到\+)\d+/, value => +value + 1)
            const { owner, repo } = context.repo
            const curDate = +new Date()
            const branchName = `feature/${curDate}/auto-create`
            const baseRef = 'main'
            const option = { owner, repo }
            const content = `更新时间戳: ${curDate}`

#             const { data: { sha } } = await github.rest.repos.getCommit({ ...option, ref: 'main' })

#             const { data: branchData } = await github.rest.git.createRef({ ...option, ref: `refs/heads/${branchName}`, sha })

#             const { data: getTreeData } = await github.rest.git.getTree({ ...option, tree_sha: branchData.object.sha })

#             const { data: blobData } = await github.rest.git.createBlob({ ...option, content })

#             const { data: treeData } = await github.rest.git.createTree({
#               ...option,
#               base_tree: getTreeData.sha,
#               tree: [{ path: 'automatic-daily-updates.txt', mode: '100644', type: 'blob', sha: blobData.sha }]
#             })

#             const { data: newCommitData } = await github.rest.git.createCommit({
#               ...option,
#               message: content,
#               author: { name: 'biaov', email: 'biaov@qq.com' },
#               tree: treeData.sha,
#               parents: [getTreeData.sha]
#             })

#             await github.rest.git.updateRef({ ...option, ref: `heads/${branchName}`, sha: newCommitData.sha, force: true })

#             const {
#               data: { number }
#             } = await github.rest.pulls.create({ ...option, title: `自动创建分支${branchName}`, head: `biaov:${branchName}`, base: baseRef, body: `自动创建分支${branchName}` })

#             await github.rest.pulls.merge({ ...option, pull_number: number })
